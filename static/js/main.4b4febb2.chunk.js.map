{"version":3,"sources":["Ai.js","helper.js","acronyms.js","Snake.js","Food.js","ScoreBoard.js","FancyButton.js","GameOverScreen.js","App.js","index.js"],"names":["module","exports","tick","snakeCells","food","updateBody","setSpeed","setSnake","setDirection","direction","foodCheck","updatedCells","snakeHead","slice","distanceX","distanceY","console","log","x","y","moveToFood","aiGridAlignment","i","length","headBodyAlignment","isArrayInArray","arr","item","item_as_string","JSON","stringify","some","ele","arrayEquals","array1","array2","randomItem","array","Math","floor","random","props","transitionName","transitionEnterTimeout","transitionLeaveTimeout","snake","map","cell","style","left","top","key","className","config","angle","spread","startVelocity","elementCount","dragFriction","duration","stagger","width","height","colors","active","showConfetti","acronym","score","fullWord","defaultChecked","onChange","aiStatus","setAi","volume","setVolume","onClick","closeModal","customStyles","content","right","bottom","marginRight","boxShadow","transform","setGameOver","window","location","reload","isOpen","isGameOver","onAfterOpen","onRequestClose","shouldCloseOnOverlayClick","FancyButton","helper","require","acronyms","App","useState","setScore","randomLocation","setFood","speed","prevDirection","value","ref","useRef","useEffect","current","usePrevious","setConfetti","acronymMap","currentAcronym","setAcronym","keypress","gameOver","playSound","sound","bloop","Audio","play","snakeTail","hasEatenFood","unshift","addEventListener","interval","setInterval","AI","outOfBoundsCheck","snakeBody","headBodyCollisionCheck","clearInterval","GameOverScreen","ScoreBoard","Snake","Food","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4b4febb2.chunk.js","sourcesContent":["function aiGridAlignment(snakeHead) {\n    if (snakeHead.x > 99) {\n        snakeHead.x -= 2\n        snakeHead.y += 2\n    } else if (snakeHead.x < 0) {\n        snakeHead.x += 2\n        snakeHead.y += 2\n    }\n    else if (snakeHead.y > 99) {\n        snakeHead.x -= 2\n        snakeHead.y -= 2\n    }\n    else if (snakeHead.y < 0) {\n        snakeHead.x += 2\n        snakeHead.y += 2\n    }\n}\n\nfunction moveToFood(distanceX, distanceY, snakeHead, setDirection, direction) {\n    console.log(direction)\n    if (distanceX > 0 || distanceY > 0) {\n        if (distanceX != 0) {\n            snakeHead.x += 2\n            setDirection(\"right\")\n        } else if (distanceY != 0) {\n            snakeHead.y += 2\n            setDirection(\"down\")\n        }\n    }\n    else if (distanceX < 0 || distanceY < 0) {\n        if (distanceX != 0) {\n            snakeHead.x -= 2\n            setDirection(\"left\")\n        } else if (distanceY != 0) {\n            snakeHead.y -= 2\n            setDirection(\"down\")\n        }\n    }\n}\n\nfunction headBodyAlignment(snakeHead, updatedCells, direction) {\n    for (let i = 0; i < updatedCells.length - 1; i++) {\n        if (snakeHead.x == updatedCells[i].x && snakeHead.y == updatedCells[i].y) {\n            console.log(\"collide\", direction)\n            if (direction == \"left\") {\n                snakeHead.x -= 2\n                snakeHead.y -= 2\n            } else if (direction == \"right\") {\n                snakeHead.x += 2\n                snakeHead.y += 2\n            } else if (direction == \"up\") {\n                snakeHead.x -= 2\n                snakeHead.y += 2\n            } else if (direction == \"down\") {\n                snakeHead.x += 2\n                snakeHead.y -= 2\n            }\n            return;\n        }\n    }\n}\n\nfunction tick(snakeCells, food, updateBody, setSpeed,\n              setSnake, setDirection, direction, foodCheck) {\n    setSpeed(5)\n\n    let updatedCells = updateBody(snakeCells)\n    let snakeHead = snakeCells.slice(-1)[0]\n    let distanceX = food.x - snakeHead.x\n    let distanceY = food.y - snakeHead.y\n\n    moveToFood(distanceX, distanceY, snakeHead, setDirection, direction)\n    aiGridAlignment(snakeHead)\n    headBodyAlignment(snakeHead, updatedCells, direction)\n\n    //Turn this on when AI is improved\n    //headBodyCollisionCheck(snakeHead)    \n    // outOfBoundsCheck(snakeHead)\n    foodCheck(snakeHead, updatedCells)\n\n    setSnake(updatedCells)\n}\n\n\nmodule.exports = {\n    tick\n}","function isArrayInArray(arr, item) {\n    var item_as_string = JSON.stringify(item);\n    var contains = arr.some(function (ele) {\n        return JSON.stringify(ele) === item_as_string;\n    });\n    return contains;\n}\n\nfunction arrayEquals(array1, array2) {\n    if (JSON.stringify(array1) === JSON.stringify(array2)) {\n        return true\n    }\n    else return false\n}\n\nfunction randomItem(array) {\n    return array[Math.floor(Math.random() * array.length)]\n  }\n\nmodule.exports = {\n    isArrayInArray:isArrayInArray,\n    arrayEquals:arrayEquals,\n    randomItem:randomItem\n}\n","module.exports =  [\n    { 'acronym': 'ETV', 'fullWord': 'Enhanced TV'},\n    { 'acronym': 'FSAT', 'fullWord': 'FreeSat'},\n    { 'acronym':  'DSAT', 'fullWord': 'Digital Sky Platform'},\n    { 'acronym': 'DCAB', 'fullWord': 'Digital Cable Platform'},\n    { 'acronym': 'OCP', 'fullWord': 'Open Core Protocol'},\n    { 'acronym': 'RB+', 'fullWord': 'Red Button Plus'},\n    { 'acronym': 'HbbTv', 'fullWord': 'Hybrid Broadcast Broadband'},\n    { 'acronym': 'TAP', 'fullWord': 'TV Application Platform'},\n    { 'acronym': 'TTR', 'fullWord': 'Tap Tap Revolution'},\n    { 'acronym': 'TAF', 'fullWord': 'TV Application Framework'}\n  ]","import React, { Component } from 'react';\nimport ReactCSSTransitionGroup from 'react-addons-css-transition-group';\n\nexport default (props) => {\n    return (\n\n        <ReactCSSTransitionGroup\n            transitionName=\"animation\"\n            transitionEnterTimeout={100}\n            transitionLeaveTimeout={100}>\n            {props.snake.map((cell, i) => {\n                const style = {\n                    left: `${cell.x}%`,\n                    top: `${cell.y}%`\n                }\n                if (props.snake.length - 1 == i) {\n                    return <div key={[cell.x, cell.y]} className=\"snake-head\" style={style}></div>\n                }\n                else {\n                    return <div key={[cell.x, cell.y]} className=\"snake-dot\" style={style}></div>\n                }\n            })}\n        </ReactCSSTransitionGroup>);\n}\n\n","import React, { Component } from 'react';\nimport Confetti from 'react-dom-confetti';\n\nconst config = {\n    angle: \"360\",\n    spread: \"360\",\n    startVelocity: \"22\",\n    elementCount: \"20\",\n    dragFriction: \"0.05\",\n    duration: \"1350\",\n    stagger: 0,\n    width: \"10px\",\n    height: \"10px\",\n    colors: [\"#a864fd\", \"#29cdff\", \"#78ff44\", \"#ff718d\", \"#fdff6a\"]\n  };\n\nexport default (props) => {\n    const style = {\n        left: `${props.food.x}%`,\n        top: `${props.food.y}%`\n    }\n    return (\n        <div>\n            <div className=\"food\" style={style}>\n            <Confetti active={props.showConfetti}  config={ config } />\n                <div className=\"foodText\"> {props.acronym}</div>\n            </div>\n        </div>)\n}\n","import React from 'react';\nimport Toggle from 'react-toggle'\nimport \"react-toggle/style.css\"\n\nexport default (props) => {\n\n    function setSound() {\n        if (props.volume == 1)\n          props.setVolume(0)\n        else\n          props.setVolume(1)\n      }\n\n      function setAiStatus() {\n        if (props.aiStatus)\n          props.setAi(false)\n        else\n          props.setAi(true)\n      }\n\n    return (\n        <div className=\"parent\">\n            <div className=\"child\">\n                <div className=\"gameBoardText\">Score: {props.score}</div>\n            </div>\n            <div className=\"child\">\n                <div className=\"gameBoardText\">{props.fullWord} </div>\n            </div>\n            <div className=\"child\">\n                <div className=\"settings\">\n                    <div>AI\n                      <Toggle className=\"spacing\" defaultChecked={false} onChange={() => setAiStatus()} />\n                    </div>\n                    <div className=\"larger-spacing\"></div>\n                    <div>Sound\n                      <Toggle className=\"spacing\" defaultChecked={true} onChange={() => setSound()} />\n                    </div>\n                </div>\n            </div>\n        </div>)\n}\n","import React from 'react';\n\nexport default (props) => {\n\n  return (\n        <div className=\"game-over\">\n          <div>Game Over</div>\n          <nav>\n            <ul>\n              <li onClick={props.closeModal}>\n                Restart\n              <span></span><span></span><span></span><span></span>\n              </li>\n            </ul>\n          </nav>\n        </div>\n  );\n}","import React from 'react';\nimport Modal from 'react-modal';\nimport FancyButton from './FancyButton'\n\nconst customStyles = {\n  content: {\n    top: '50%',\n    left: '50%',\n    right: 'auto',\n    bottom: 'auto',\n    marginRight: '-50%',\n    height: '200px',\n    width: '300px',\n    boxShadow: '0 3px 7px rgba(0, 0, 0, 0.3)',\n    transform: 'translate(-50%, -50%)'\n  }\n};\n\nexport default (props) => {\n\n  function afterOpenModal() {\n     //Confetti effects? \n  }\n\n  function closeModal() {\n    props.setGameOver(false);\n    window.location.reload()\n  }\n\n  return (\n    <div className=\"modal\">\n      <Modal\n        isOpen={props.isGameOver}\n        onAfterOpen={afterOpenModal}\n        onRequestClose={closeModal}\n        style={customStyles}\n        shouldCloseOnOverlayClick={false} >\n        <FancyButton closeModal={closeModal} />\n      </Modal>\n    </div>\n  );\n}","import React, { useState, useEffect, useRef } from 'react';\nimport Snake from './Snake';\nimport Food from './Food';\nimport ScoreBoard from './ScoreBoard';\nimport GameOverScreen from './GameOverScreen'\nimport AI from './Ai'\n\nconst helper = require('./helper.js');\nconst acronyms = require('./acronyms.js');\n\nfunction App() {\n  const [score, setScore] = useState(0)\n  const [food, setFood] = useState(randomLocation())\n  const [speed, setSpeed] = useState(70)\n  const [direction, setDirection] = useState(\"right\")\n  const prevDirection = usePrevious(direction)\n  const [aiStatus, setAi] = useState(false)\n  const [volume, setVolume] = useState(1)\n  const [isGameOver, setGameOver] = useState(false);\n  const [showConfetti, setConfetti] = useState(false);\n  const [snakeCells, setSnake] = useState([\n    { 'x': 0, 'y': 0 },\n    { 'x': 2, 'y': 0 },\n    { 'x': 4, 'y': 0 },\n    { 'x': 6, 'y': 0 },\n  ]);\n\n  const [acronymMap, setAcronymsMap] = useState(acronyms);\n  const [currentAcronym, setAcronym] = useState(acronymMap[0])\n\n  useEffect(() => {\n    window.addEventListener('keydown', keypress)\n  }, []);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (isGameOver) return;\n\n      if (!aiStatus) {\n        tick()\n      } else {\n        AI.tick(snakeCells, food, updateBody, setSpeed,\n                setSnake, setDirection, direction, foodCheck)\n      }\n    }, speed);\n    return () => clearInterval(interval);\n  }, [speed, direction, food, snakeCells]);\n\n  function usePrevious(value) {\n    const ref = useRef();\n    useEffect(() => {\n      ref.current = value;\n    }, [value]); // Only re-run if value changes\n\n    return ref;\n  }\n\n  function randomLocation() {\n    let x = Math.floor(Math.random() * 100 / 2) * 2;\n    let y = Math.floor(Math.random() * 100 / 2) * 2;\n    return { 'x': x, 'y': y }\n  }\n\n  function keypress({ key }) {\n    switch (key) {\n      case \"ArrowRight\":\n        if (prevDirection.current != \"left\")\n          setDirection(\"right\")\n        break\n      case \"ArrowLeft\":\n        if (prevDirection.current != \"right\")\n          setDirection(\"left\")\n        break\n      case \"ArrowDown\":\n        if (prevDirection.current != \"up\")\n          setDirection(\"down\")\n        break\n      case \"ArrowUp\":\n        if (prevDirection.current != \"down\")\n          setDirection(\"up\")\n        break\n    }\n  }\n\n  function updateBody(snakeCells) {\n    let updatedCells = [...snakeCells]\n    for (let cell = 0; cell < updatedCells.length - 1; cell++) {\n      updatedCells[cell].x = snakeCells[cell + 1].x\n      updatedCells[cell].y = snakeCells[cell + 1].y\n    }\n\n    return updatedCells;\n  }\n\n  function gameOver() {\n    setGameOver(true)\n    playSound('game-over.mp3')\n  }\n\n  function headBodyCollisionCheck(snakeHead) {\n    let snakeBody = snakeCells.slice(0, -1)\n\n    if (helper.isArrayInArray(snakeBody, snakeHead)) {\n      gameOver()\n    }\n  }\n\n  function outOfBoundsCheck(snakeHead) {\n    if (snakeHead.x > 99 || snakeHead.x < 0\n      || snakeHead.y < 0 || snakeHead.y > 99) {\n      gameOver()\n    } else\n      return false;\n  }\n\n  function hasEatenFood(snakeHead) {\n    return helper.arrayEquals(snakeHead, food);\n  }\n\n  function playSound(sound) {\n    var bloop = new Audio(sound)\n    bloop.volume = volume\n    bloop.play()\n  }\n\n function foodCheck(snakeHead, updatedCells) {\n  let snakeTail = updatedCells[0]\n\n  if (hasEatenFood(snakeHead)) {\n      setConfetti(true)\n\n      setFood(randomLocation())\n      // setSpeed(speed - 10)\n      setScore(score => score + 1)\n      setAcronym(helper.randomItem(acronymMap))\n      playSound('bloop.mp3')\n      updatedCells.unshift({ 'x': snakeTail.x, 'y': snakeTail.y })\n    }\n    else {\n      setConfetti(false)\n    }\n }\n\n  function tick() {\n    let updatedCells = updateBody(snakeCells)\n    let snakeHead = updatedCells.slice(-1)[0]\n\n    switch (direction) {\n      case \"right\":\n        snakeHead.x += 2;\n        break\n      case \"left\":\n        snakeHead.x -= 2;\n        break\n      case \"down\":\n        snakeHead.y += 2;\n        break\n      case \"up\":\n        snakeHead.y -= 2;\n        break\n    }\n\n    outOfBoundsCheck(snakeHead)\n    headBodyCollisionCheck(snakeHead)\n    foodCheck(snakeHead, updatedCells)\n\n    setSnake(updatedCells)\n  }\n\n  return (\n    <div>\n      <GameOverScreen isGameOver={isGameOver} setGameOver={setGameOver} />\n      <ScoreBoard score={score} setAi={setAi} aiStatus={aiStatus} setVolume={setVolume} volume={volume} fullWord={currentAcronym.fullWord} />\n      <div className=\"game-area\" >\n        <Snake snake={snakeCells} />\n        <Food food={food} acronym={currentAcronym.acronym} showConfetti={showConfetti} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}